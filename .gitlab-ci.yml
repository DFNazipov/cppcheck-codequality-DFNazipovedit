###############################################################################
# GitLab CI YAML Documentation: https://docs.gitlab.com/ee/ci/yaml/
#
# Using badge colors from https://shields.io
# - Green:  #44cc11
# - Yellow: #dfb317
# - Red:    #e05d44
###############################################################################

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

default:
  tags:
    - docker
  image: python:3.9
  interruptible: true

cache:
  key: one-key-to-rule-them-all
  paths:
    - .cache/

stages:
  - lint
  - build
  - test
  - deploy

###############################################################################
# STYLE & LINT
###############################################################################

pylint:
  stage: lint
  needs: []
  dependencies: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install -U anybadge pylint pylint-exit==1.2.0 pylint-gitlab==1.1.0 pytest
  script:
    - anybadge -l pylint -v 'fail' -c '#e05d44' -o -f badge.svg
    - python_files=$(git ls-files '*.py' | tr '\n' ' ')
    # Gitlab CodeQuality report
    - pylint --rcfile=.pylintrc --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter ${python_files} > codeclimate.json
    # Text file output
    - pylint --rcfile=.pylintrc ${python_files} | tee ./pylint_out.txt || pylint-exit $?
    - PYLINT_SCORE=$(cat ./pylint_out.txt | grep -oP 'Your code has been rated at \K(\d+\.*\d+)')
    - anybadge -v $PYLINT_SCORE -o -f badge.svg pylint
    - echo "pylint_rating $PYLINT_SCORE" > metrics.txt
  artifacts:
    when: always
    paths:
      - badge.svg
      - pylint_out.txt
      - codeclimate.json
    reports:
      metrics: metrics.txt
      codequality: codeclimate.json

format_black:
  stage: lint
  needs: []
  dependencies: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install -U black==22.10.0 anybadge
    - python --version
    - black --version
    - python -c "import anybadge; print(\"anybadge\", anybadge.__version__)"
  script:
    - anybadge -l format -v 'fail' -c '#e05d44' -o -f badge.svg
    - black --check ./
    - anybadge -l format -v ' ok ' -c '#44cc11' -o -f badge.svg
  allow_failure: true
  artifacts:
    when: always
    paths:
      - badge.svg

###############################################################################
# BUILD
###############################################################################

sdist:
  stage: build
  dependencies: []
  needs: []
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install "setuptools>=45.0" "setuptools-scm>=6.0" wheel
  script:
    - python setup.py sdist --formats=zip
  artifacts:
    paths:
      - dist/*

###############################################################################
# TEST
###############################################################################

pytest:
  stage: test
  image: $IMAGE
  dependencies: []
  needs: []
  before_script:
    - python3 -m pip install tox
  script:
    - tox -e ${TOXENV}
  artifacts:
    when: always
    paths:
      - ./.coverage.*
      - cppcheck_codequality/version.py
      - pytest_out*
      - coverage.xml
    reports:
      junit: ./*.xml.junit
  parallel:
    matrix:
      - IMAGE: python:3.6
        TOXENV: py36
      - IMAGE: python:3.7
        TOXENV: py37
      - IMAGE: python:3.8
        TOXENV: py38
      - IMAGE: python:3.9
        TOXENV: py39

coverage:
  stage: test
  needs:
    - job: pytest
      artifacts: true
  before_script:
    - python3 -m pip install tox
  script:
    - tox -e coverage
  coverage: /(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  artifacts:
    paths:
      - coverage.xml
      - htmlcov/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

gitlab_artifact_report:
  stage: test
  needs:
    - job: sdist
      artifacts: true
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install ./dist/cppcheck_*.zip
  script:
    - cppcheck-codequality -i ./tests/cppcheck_simple.xml -o codequality.json
  artifacts:
    when: always
    paths:
      - codequality.json
    #reports:
    #  codequality: codequality.json

###############################################################################
# DEPLOY
###############################################################################

pypi_publish:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - job: pylint
      artifacts: false
    - job: sdist
      artifacts: false
    - job: pytest
      artifacts: false
  before_script:
    - python3 -m pip install --user virtualenv
    - python3 -m virtualenv venv/
    - source venv/bin/activate
    - pip install --upgrade setuptools wheel twine
  script:
    - python setup.py sdist bdist_wheel
    - python -m twine upload dist/* -u __token__ -p $PYPI_API_TOKEN
  artifacts:
    paths:
      - dist/*
